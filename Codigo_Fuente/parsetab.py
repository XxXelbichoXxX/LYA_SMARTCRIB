
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND BGN CALL CAMARA CBRT CHR CKEY CM COMMENT CPRT DIF DIV DO ELSE END ENDL ENDST EQL EQL_DIV EQL_MULT EQL_SUB EQL_SUM FLT GRT GRTE IDF IF INT MULT MUSICA NOT OBRT OKEY OPRT OR PCD SML SMLE STR SUBST WHLprogram : blockblock : constDecl statementconstDecl : constAssignmentList ENDSTconstDecl : emptyconstAssignmentList : IDF EQL expressionconstAssignmentList : constAssignmentList ENDST IDF EQL expressionidentList : IDFidentList : identList CM IDFstatement : CALL CAMARAstatement : BGN OKEY statementList CKEYstatement : IF OPRT condition CPRT OKEY constDecl statement CKEYstatement : WHL OPRT condition CPRT  OKEY statement CKEYstatement : DO OKEY constDecl statement CKEY WHL OPRT condition CPRTstatement : CALL MUSICAstatement : emptystatementList : statementstatementList : statementList ENDST statementcondition : expression relation expressionrelation : EQLrelation : DIFrelation : SMLrelation : GRTrelation : SMLErelation : GRTEexpression : termexpression : addingOperator termexpression : expression addingOperator termaddingOperator : ADDaddingOperator : SUBSTterm : factorterm : term multiplyingOperator factormultiplyingOperator : DIVfactor : IDFfactor : INTfactor : OPRT expression CPRTempty :'
    
_lr_action_items = {'IDF':([0,14,15,19,20,21,26,28,29,31,38,39,40,41,47,48,49,50,51,52,53,61,70,],[6,22,23,23,23,6,23,-28,-29,23,23,23,23,-32,23,-19,-20,-21,-22,-23,-24,6,23,]),'CALL':([0,3,5,14,18,21,37,45,61,63,65,],[-36,8,-4,-3,8,-36,8,8,-36,8,8,]),'BGN':([0,3,5,14,18,21,37,45,61,63,65,],[-36,9,-4,-3,9,-36,9,9,-36,9,9,]),'IF':([0,3,5,14,18,21,37,45,61,63,65,],[-36,10,-4,-3,10,-36,10,10,-36,10,10,]),'WHL':([0,3,5,14,18,21,37,45,61,63,64,65,],[-36,11,-4,-3,11,-36,11,11,-36,11,67,11,]),'DO':([0,3,5,14,18,21,37,45,61,63,65,],[-36,12,-4,-3,12,-36,12,12,-36,12,12,]),'$end':([0,1,2,3,5,7,13,14,16,17,44,69,71,73,],[-36,0,-1,-36,-4,-2,-15,-3,-9,-14,-10,-12,-11,-13,]),'ENDST':([4,13,16,17,18,23,24,25,27,30,32,33,42,44,45,56,57,58,59,60,69,71,73,],[14,-15,-9,-14,-36,-33,-5,-25,-30,-34,45,-16,-26,-10,-36,-6,-27,-31,-35,-17,-12,-11,-13,]),'CKEY':([5,13,14,16,17,18,21,32,33,37,44,45,55,60,61,63,65,66,68,69,71,73,],[-4,-15,-3,-9,-14,-36,-36,44,-16,-36,-10,-36,64,-17,-36,-36,-36,69,71,-12,-11,-13,]),'EQL':([6,22,23,25,27,30,35,42,57,58,59,],[15,38,-33,-25,-30,-34,48,-26,-27,-31,-35,]),'CAMARA':([8,],[16,]),'MUSICA':([8,],[17,]),'OKEY':([9,12,46,54,],[18,21,61,63,]),'OPRT':([10,11,15,19,20,26,28,29,31,38,39,40,41,47,48,49,50,51,52,53,67,70,],[19,20,31,31,31,31,-28,-29,31,31,31,31,-32,31,-19,-20,-21,-22,-23,-24,70,31,]),'ADD':([15,19,20,23,24,25,27,30,31,35,38,42,43,47,48,49,50,51,52,53,56,57,58,59,62,70,],[28,28,28,-33,28,-25,-30,-34,28,28,28,-26,28,28,-19,-20,-21,-22,-23,-24,28,-27,-31,-35,28,28,]),'SUBST':([15,19,20,23,24,25,27,30,31,35,38,42,43,47,48,49,50,51,52,53,56,57,58,59,62,70,],[29,29,29,-33,29,-25,-30,-34,29,29,29,-26,29,29,-19,-20,-21,-22,-23,-24,29,-27,-31,-35,29,29,]),'INT':([15,19,20,26,28,29,31,38,39,40,41,47,48,49,50,51,52,53,70,],[30,30,30,30,-28,-29,30,30,30,30,-32,30,-19,-20,-21,-22,-23,-24,30,]),'DIV':([23,25,27,30,42,57,58,59,],[-33,41,-30,-34,41,41,-31,-35,]),'DIF':([23,25,27,30,35,42,57,58,59,],[-33,-25,-30,-34,49,-26,-27,-31,-35,]),'SML':([23,25,27,30,35,42,57,58,59,],[-33,-25,-30,-34,50,-26,-27,-31,-35,]),'GRT':([23,25,27,30,35,42,57,58,59,],[-33,-25,-30,-34,51,-26,-27,-31,-35,]),'SMLE':([23,25,27,30,35,42,57,58,59,],[-33,-25,-30,-34,52,-26,-27,-31,-35,]),'GRTE':([23,25,27,30,35,42,57,58,59,],[-33,-25,-30,-34,53,-26,-27,-31,-35,]),'CPRT':([23,25,27,30,34,36,42,43,57,58,59,62,72,],[-33,-25,-30,-34,46,54,-26,59,-27,-31,-35,-18,73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,],[2,]),'constDecl':([0,21,61,],[3,37,65,]),'constAssignmentList':([0,21,61,],[4,4,4,]),'empty':([0,3,18,21,37,45,61,63,65,],[5,13,13,5,13,13,5,13,13,]),'statement':([3,18,37,45,63,65,],[7,33,55,60,66,68,]),'expression':([15,19,20,31,38,47,70,],[24,35,35,43,56,62,35,]),'term':([15,19,20,26,31,38,39,47,70,],[25,25,25,42,25,25,57,25,25,]),'addingOperator':([15,19,20,24,31,35,38,43,47,56,62,70,],[26,26,26,39,26,39,26,39,26,39,39,26,]),'factor':([15,19,20,26,31,38,39,40,47,70,],[27,27,27,27,27,27,27,58,27,27,]),'statementList':([18,],[32,]),'condition':([19,20,70,],[34,36,72,]),'multiplyingOperator':([25,42,57,],[40,40,40,]),'relation':([35,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','analizadorSintactico.py',34),
  ('block -> constDecl statement','block',2,'p_block','analizadorSintactico.py',39),
  ('constDecl -> constAssignmentList ENDST','constDecl',2,'p_constDecl','analizadorSintactico.py',43),
  ('constDecl -> empty','constDecl',1,'p_constDeclEmpty','analizadorSintactico.py',48),
  ('constAssignmentList -> IDF EQL expression','constAssignmentList',3,'p_constAssignmentList1','analizadorSintactico.py',53),
  ('constAssignmentList -> constAssignmentList ENDST IDF EQL expression','constAssignmentList',5,'p_constAssignmentList2','analizadorSintactico.py',57),
  ('identList -> IDF','identList',1,'p_identList1','analizadorSintactico.py',61),
  ('identList -> identList CM IDF','identList',3,'p_identList2','analizadorSintactico.py',65),
  ('statement -> CALL CAMARA','statement',2,'p_statement1','analizadorSintactico.py',69),
  ('statement -> BGN OKEY statementList CKEY','statement',4,'p_statement2','analizadorSintactico.py',75),
  ('statement -> IF OPRT condition CPRT OKEY constDecl statement CKEY','statement',8,'p_statement3','analizadorSintactico.py',79),
  ('statement -> WHL OPRT condition CPRT OKEY statement CKEY','statement',7,'p_statement4','analizadorSintactico.py',84),
  ('statement -> DO OKEY constDecl statement CKEY WHL OPRT condition CPRT','statement',9,'p_statement5','analizadorSintactico.py',89),
  ('statement -> CALL MUSICA','statement',2,'p_statement6','analizadorSintactico.py',94),
  ('statement -> empty','statement',1,'p_statementEmpty','analizadorSintactico.py',98),
  ('statementList -> statement','statementList',1,'p_statementList1','analizadorSintactico.py',102),
  ('statementList -> statementList ENDST statement','statementList',3,'p_statementList2','analizadorSintactico.py',106),
  ('condition -> expression relation expression','condition',3,'p_condition1','analizadorSintactico.py',110),
  ('relation -> EQL','relation',1,'p_relation1','analizadorSintactico.py',114),
  ('relation -> DIF','relation',1,'p_relation2','analizadorSintactico.py',118),
  ('relation -> SML','relation',1,'p_relation3','analizadorSintactico.py',122),
  ('relation -> GRT','relation',1,'p_relation4','analizadorSintactico.py',126),
  ('relation -> SMLE','relation',1,'p_relation5','analizadorSintactico.py',130),
  ('relation -> GRTE','relation',1,'p_relation6','analizadorSintactico.py',134),
  ('expression -> term','expression',1,'p_expression1','analizadorSintactico.py',138),
  ('expression -> addingOperator term','expression',2,'p_expression2','analizadorSintactico.py',142),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','analizadorSintactico.py',146),
  ('addingOperator -> ADD','addingOperator',1,'p_addingOperator1','analizadorSintactico.py',150),
  ('addingOperator -> SUBST','addingOperator',1,'p_addingOperator2','analizadorSintactico.py',154),
  ('term -> factor','term',1,'p_term1','analizadorSintactico.py',158),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','analizadorSintactico.py',162),
  ('multiplyingOperator -> DIV','multiplyingOperator',1,'p_multiplyingOperator1','analizadorSintactico.py',166),
  ('factor -> IDF','factor',1,'p_factor1','analizadorSintactico.py',170),
  ('factor -> INT','factor',1,'p_factor2','analizadorSintactico.py',174),
  ('factor -> OPRT expression CPRT','factor',3,'p_factor3','analizadorSintactico.py',178),
  ('empty -> <empty>','empty',0,'p_empty','analizadorSintactico.py',182),
]
